{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","utils/serverHelper.ts","components/Loader/Loader.tsx","common/InputField.tsx","common/Button.tsx","components/NewCommentForm.tsx","common/CommentsList.tsx","common/NoCommentsMessage.tsx","common/CommentError.tsx","components/PostDetails.tsx","common/DropdownTrigger.tsx","common/UserListItem.tsx","components/UserSelector.tsx","types/useUsers.ts","App.tsx","index.tsx"],"names":["PostsList","posts","postSelected","handleSelectPost","className","map","post","isPostSelected","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","body","JSON","stringify","headers","fetch","response","json","client","getUsers","getPosts","userId","getComments","postId","deleteComment","commentId","addComment","comment","Loader","InputField","label","value","onChange","error","errorMessage","classNames","e","target","Button","isLoading","NewCommentForm","handleOnAdd","isNewCommentLoading","useState","name","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","setBody","isBodyError","setIsBodyError","handleReset","useEffect","onSubmit","event","preventDefault","isNameEmpty","length","isEmailEmpty","isBodyEmpty","htmlFor","placeholder","trimStart","CommentsList","comments","onDeleteComment","href","NoCommentsMessage","CommentError","PostDetails","setComments","isLoaderVisible","setIsLoaderVisible","isNewFormVisible","setIsNewFormVisible","isCommentErrorVisible","setIsCommentErrorVisible","hasError","setHasError","setIsNewCommentLoading","loadComments","selectedPost","commentsFromServer","handleOnDelete","prevComments","filter","newComment","preparedComment","isCommentsVisible","useMemo","isNoComments","DropdownTrigger","selectedUserName","UserListItem","user","selected","UserSelector","handleSelectUser","selectedUserId","users","setUsers","isError","setIsError","loadUsers","usersFromServer","useUsers","showUsers","setShowUsers","wrapperRef","useRef","handleClickOutside","useCallback","current","contains","document","addEventListener","removeEventListener","handleChangeUser","newUserId","find","ref","prev","role","App","setSelectedUserId","setPostSelected","setPosts","isPostDetailsVisible","setIsPostDetailsVisible","isSideBarVisible","setIsSideBarVisible","isPostErrorVisible","setIsPostErrorVisible","loadPosts","postsFromServer","content","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.27657ecb.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  postSelected: Post | null;\n  handleSelectPost: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = (\n  { posts, postSelected, handleSelectPost },\n) => {\n  const renderPostRow = (post: Post) => {\n    const isPostSelected = postSelected?.id === post.id;\n\n    return (\n      <tr data-cy=\"Post\" key={post.id}>\n        <td data-cy=\"PostId\">{post.id}</td>\n        <td data-cy=\"PostTitle\">{post.title}</td>\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            type=\"button\"\n            data-cy=\"PostButton\"\n            className={`button ${isPostSelected ? 'is-link' : 'is-link is-light'}`}\n            onClick={() => handleSelectPost(post)}\n          >\n            {isPostSelected ? 'Close' : 'Open'}\n          </button>\n        </td>\n      </tr>\n    );\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(renderPostRow)}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  await wait(300);\n  const response = await fetch(BASE_URL + url, options);\n\n  return response.json();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsers = async () => {\n  const response = await client.get<User[]>('/users');\n\n  return response;\n};\n\nexport const getPosts = async (userId: number) => {\n  const response = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n  return response;\n};\n\nexport const getComments = async (postId: number) => {\n  const response = await client.get<Comment[]>(`/comments?postId=${postId}`);\n\n  return response;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await client.delete(`/comments/${commentId}`);\n\n  return response;\n};\n\nexport const addComment = async (comment: CommentData) => {\n  const response = await client.post<Comment>('/comments', comment);\n\n  return response;\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { ChangeEvent } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  error?: boolean;\n  errorMessage?: string;\n};\n\nexport const InputField: React.FC<Props> = ({\n  label,\n  value,\n  onChange,\n  error = false,\n  errorMessage = 'Field is required',\n}) => {\n  return (\n    <div className=\"field\">\n      <label className=\"label\">{label}</label>\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          className={classNames('input', { 'is-danger': error })}\n          value={value}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => onChange(\n            e.target.value,\n          )}\n        />\n      </div>\n      {error && <p className=\"help is-danger\">{errorMessage}</p>}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  label: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nexport const Button: React.FC<Props> = ({\n  label,\n  isLoading = false,\n  onClick,\n}) => {\n  return (\n    <button\n      type=\"button\"\n      className={classNames('button', { 'is-loading': isLoading })}\n      onClick={onClick}\n    >\n      {label}\n    </button>\n  );\n};\n","import React, {\n  FormEvent,\n  ChangeEvent,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { InputField } from '../common/InputField';\nimport { Button } from '../common/Button';\n\ntype Props = {\n  handleOnAdd: (newComment: CommentData) => void;\n  isNewCommentLoading: boolean;\n  postSelected: Post | null;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleOnAdd,\n  isNewCommentLoading,\n  postSelected,\n}) => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [body, setBody] = useState('');\n  const [isBodyError, setIsBodyError] = useState(false);\n\n  const handleReset = () => {\n    setIsBodyError(false);\n    setIsEmailError(false);\n    setIsNameError(false);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const isNameEmpty = name.length === 0;\n    const isEmailEmpty = email.length === 0;\n    const isBodyEmpty = body.length === 0;\n\n    setIsNameError(isNameEmpty);\n    setIsEmailError(isEmailEmpty);\n    setIsBodyError(isBodyEmpty);\n\n    if (isNameEmpty || isEmailEmpty || isBodyEmpty) {\n      return;\n    }\n\n    const newComment: CommentData = {\n      name,\n      email,\n      body,\n    };\n\n    handleOnAdd(newComment);\n    setBody('');\n  };\n\n  useEffect(() => {\n    handleReset();\n  }, [postSelected]);\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <InputField\n          label=\"Author Name\"\n          value={name}\n          onChange={setName}\n          error={isNameError}\n          errorMessage=\"Name is required\"\n        />\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <InputField\n          label=\"Author Email\"\n          value={email}\n          onChange={setEmail}\n          error={isEmailError}\n          errorMessage=\"Email is required\"\n        />\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isBodyError,\n            })}\n            value={body}\n            onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setBody(\n              e.target.value.trimStart(),\n            )}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <Button\n            label=\"Add\"\n            isLoading={isNewCommentLoading}\n            onClick={() => {}}\n          />\n        </div>\n        <div className=\"control\">\n          <Button label=\"Clear\" onClick={handleReset} />\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  onDeleteComment: (id: number) => void;\n};\n\nexport const CommentsList: React.FC<Props> = (\n  { comments, onDeleteComment },\n) => {\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => onDeleteComment(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\nexport const NoCommentsMessage: React.FC = () => {\n  return (\n    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n      No comments yet\n    </p>\n  );\n};\n","import React from 'react';\n\nexport const CommentError: React.FC = () => {\n  return (\n    <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n      Something went wrong!\n    </div>\n  );\n};\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { getComments, deleteComment, addComment } from '../utils/serverHelper';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentsList } from '../common/CommentsList';\nimport { NoCommentsMessage } from '../common/NoCommentsMessage';\nimport { CommentError } from '../common/CommentError';\n\ntype Props = {\n  post: Post | null;\n  postSelected: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post, postSelected }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isNewFormVisible, setIsNewFormVisible] = useState(false);\n  const [isCommentErrorVisible, setIsCommentErrorVisible] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isNewCommentLoading, setIsNewCommentLoading] = useState(false);\n\n  useEffect(() => {\n    const loadComments = async (selectedPost: Post) => {\n      setIsLoaderVisible(true);\n\n      try {\n        const commentsFromServer = await getComments(selectedPost.id);\n\n        setComments(commentsFromServer);\n        setIsCommentErrorVisible(false);\n        setIsNewFormVisible(false);\n      } catch {\n        setIsCommentErrorVisible(true);\n      } finally {\n        setIsLoaderVisible(false);\n      }\n    };\n\n    if (post !== null) {\n      loadComments(post);\n    }\n  }, [post]);\n\n  const handleOnDelete = async (id: number) => {\n    if (post === null) {\n      return;\n    }\n\n    try {\n      await deleteComment(id);\n\n      setComments(prevComments => prevComments\n        .filter(comment => comment.id !== id));\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  const handleOnAdd = async (newComment: CommentData) => {\n    const preparedComment = { ...newComment, postId: post?.id };\n\n    setIsNewCommentLoading(true);\n\n    try {\n      const comment = await addComment(preparedComment);\n\n      setComments(prevComments => [...prevComments, comment]);\n      setIsNewFormVisible(false);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsNewCommentLoading(false);\n    }\n  };\n\n  const handleShowNewForm = () => {\n    setIsNewFormVisible(true);\n  };\n\n  const isCommentsVisible = useMemo(() => comments.length > 0\n  && !isLoaderVisible, [comments, isLoaderVisible]);\n  const isNoComments = useMemo(() => comments.length === 0\n  && !isLoaderVisible\n  && !isCommentErrorVisible,\n  [comments, isLoaderVisible, isCommentErrorVisible]);\n\n  if (hasError) {\n    return <CommentError />;\n  }\n\n  return (\n    <>\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${post?.id}: ${post?.title}`}</h2>\n          <p data-cy=\"PostBody\">{post?.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {isLoaderVisible && <Loader />}\n          {isCommentErrorVisible && <CommentError />}\n          {isNoComments && <NoCommentsMessage />}\n          {isCommentsVisible\n          && (\n            <CommentsList\n              comments={comments}\n              onDeleteComment={handleOnDelete}\n            />\n          )}\n          {isNewFormVisible && (\n            <NewCommentForm\n              handleOnAdd={handleOnAdd}\n              isNewCommentLoading={isNewCommentLoading}\n              postSelected={postSelected}\n            />\n          )}\n          {!isNewFormVisible && isCommentsVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleShowNewForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","/* eslint-disable no-unneeded-ternary */\nimport React from 'react';\n\ntype Props = {\n  onClick: () => void;\n  selectedUserName: string | undefined;\n};\n\nexport const DropdownTrigger: React.FC<Props> = (\n  { onClick, selectedUserName },\n) => (\n  <div className=\"dropdown-trigger\">\n    <button\n      type=\"button\"\n      className=\"button\"\n      aria-haspopup=\"true\"\n      aria-controls=\"dropdown-menu\"\n      onClick={onClick}\n    >\n      <span>\n        {selectedUserName ? selectedUserName : 'Choose a user'}\n      </span>\n\n      <span className=\"icon is-small\">\n        <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n      </span>\n    </button>\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User;\n  selected: boolean;\n  onClick: (id: number) => void;\n};\n\nexport const UserListItem: React.FC<Props> = ({ user, selected, onClick }) => (\n  <a\n    href={`#user-${user.id}`}\n    className={classNames('dropdown-item', { 'is-active': selected })}\n    onClick={() => onClick(user.id)}\n  >\n    {user.name}\n  </a>\n);\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { useUsers } from '../types/useUsers';\nimport { DropdownTrigger } from '../common/DropdownTrigger';\nimport { UserListItem } from '../common/UserListItem';\n\ntype Props = {\n  handleSelectUser: (id: number) => void;\n  selectedUserId: number;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  handleSelectUser,\n  selectedUserId,\n}) => {\n  const { users, isError } = useUsers();\n  const [showUsers, setShowUsers] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const handleClickOutside = useCallback((event: MouseEvent) => {\n    if (wrapperRef.current\n      && !wrapperRef.current.contains(event.target as Node)) {\n      setShowUsers(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n\n  const handleLoadUsers = () => {\n    setShowUsers(prev => !prev);\n  };\n\n  const handleChangeUser = (newUserId: number) => {\n    setShowUsers(false);\n    handleSelectUser(newUserId);\n  };\n\n  const selectedUserName = users.find(user => user.id === selectedUserId)?.name;\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\">\n        Something went wrong!\n      </div>\n    );\n  }\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={wrapperRef}\n      className={classNames('dropdown', {\n        'is-active': showUsers,\n      })}\n    >\n      <DropdownTrigger\n        onClick={handleLoadUsers}\n        selectedUserName={selectedUserName}\n      />\n\n      {showUsers && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <UserListItem\n                key={user.id}\n                user={user}\n                selected={selectedUserId === user.id}\n                onClick={handleChangeUser}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { User } from './User';\nimport { getUsers } from '../utils/serverHelper';\n\nexport const useUsers = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      try {\n        const usersFromServer = await getUsers();\n\n        setUsers(usersFromServer);\n      } catch {\n        setIsError(true);\n      }\n    };\n\n    loadUsers();\n  }, []);\n\n  return { users, isError };\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { getPosts } from './utils/serverHelper';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [postSelected, setPostSelected] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isPostDetailsVisible, setIsPostDetailsVisible] = useState(false);\n  const [isSideBarVisible, setIsSideBarVisible] = useState(false);\n  const [isPostErrorVisible, setIsPostErrorVisible] = useState(false);\n\n  const loadPosts = async () => {\n    setIsLoaderVisible(true);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      setPosts(postsFromServer);\n      setIsPostErrorVisible(false);\n    } catch {\n      setIsPostErrorVisible(true);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  const handleSelectPost = (post: Post) => {\n    if (postSelected?.id === post.id) {\n      setIsSideBarVisible(false);\n      setIsPostDetailsVisible(false);\n      setPostSelected(null);\n    } else {\n      setPostSelected(post);\n      setIsSideBarVisible(true);\n      setIsPostDetailsVisible(true);\n    }\n  };\n\n  const handleSelectUser = (newUserId: number) => {\n    setSelectedUserId(newUserId);\n    setPostSelected(null);\n    setIsPostDetailsVisible(false);\n    setIsSideBarVisible(false);\n  };\n\n  let content: React.ReactNode;\n\n  if (selectedUserId === 0) {\n    content = <p data-cy=\"NoSelectedUser\">No user selected</p>;\n  } else if (isPostErrorVisible) {\n    content = (\n      <div className=\"notification is-danger\" data-cy=\"PostsLoadingError\">\n        Something went wrong!\n      </div>\n    );\n  } else if (isLoaderVisible) {\n    content = <Loader />;\n  } else if (posts.length === 0) {\n    content = (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  } else {\n    content = (\n      <PostsList\n        posts={posts}\n        postSelected={postSelected}\n        handleSelectPost={handleSelectPost}\n      />\n    );\n  }\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  handleSelectUser={handleSelectUser}\n                  selectedUserId={selectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {content}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSideBarVisible },\n            )}\n          >\n            {isPostDetailsVisible && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={postSelected}\n                  postSelected={postSelected}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}