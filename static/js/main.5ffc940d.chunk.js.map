{"version":3,"sources":["components/PostsList.tsx","utils/serverHelper.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postSelected","handleSelectPost","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","body","JSON","stringify","headers","fetch","response","ok","Error","json","COMMENTS_ENDPOINT","getUsers","getPosts","userId","getComments","postId","deleteComment","commentId","addComment","comment","Loader","NewCommentForm","handleOnAdd","isNewCommentLoading","useState","name","email","formData","setFormData","formErrors","setFormErrors","useEffect","onSubmit","event","preventDefault","isNameEmpty","trim","length","isEmailEmpty","isBodyEmpty","htmlFor","placeholder","value","onChange","target","prev","trimStart","PostDetails","comments","setComments","isLoaderVisible","setIsLoaderVisible","isNewFormVisible","setIsNewFormVisible","isWriteCommentVisible","setIsWriteCommentVisible","isCommentErrorVisible","setIsCommentErrorVisible","hasError","setHasError","setIsNewCommentLoading","loadComments","selectedPost","commentsFromServer","newComment","preparedComment","isCommentsVisible","isNoComments","href","preparedComments","filter","handleOnDelete","UserSelector","handleSelectUser","selectedUserId","users","setUsers","isError","setIsError","showUsers","setShowUsers","wrapperRef","useRef","loadUsers","useCallback","usersFromServer","handleClickOutside","current","contains","document","addEventListener","removeEventListener","selectedUserName","find","user","ref","classNames","prevState","role","newUserId","App","setSelectedUserId","setPostSelected","setPosts","isPostDetailsVisible","setIsPostDetailsVisible","isSideBarVisible","setIsSideBarVisible","isPostErrorVisible","setIsPostErrorVisible","isEmptyPostMessageVisible","setIsEmptyPostMessageVisible","loadPosts","postsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5ffc940d.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  postSelected: Post | null,\n  handleSelectPost: (post: Post) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postSelected,\n  handleSelectPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={`button ${postSelected?.id === post.id ? 'is-link' : 'is-link is-light'}`}\n                  onClick={() => {\n                    handleSelectPost(post);\n                  }}\n                >\n                  {postSelected?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { User } from '../types/User';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  await wait(300);\n  const response = await fetch(BASE_URL + url, options);\n\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n\n  return response.json();\n}\n\nconst USERS_ENDPOINT = '/users';\nconst POSTS_ENDPOINT = '/posts';\nconst COMMENTS_ENDPOINT = '/comments';\n\nexport const getUsers = async (): Promise<User[]> => {\n  return request<User[]>(USERS_ENDPOINT);\n};\n\nexport const getPosts = async (userId: number): Promise<Post[]> => {\n  return request<Post[]>(`${POSTS_ENDPOINT}?userId=${userId}`);\n};\n\nexport const getComments = async (postId: number): Promise<Comment[]> => {\n  return request<Comment[]>(`${COMMENTS_ENDPOINT}?postId=${postId}`);\n};\n\nexport const deleteComment = async (commentId: number): Promise<void> => {\n  await request<void>(`${COMMENTS_ENDPOINT}/${commentId}`, 'DELETE');\n};\n\nexport const addComment = async (comment: CommentData): Promise<Comment> => {\n  return request<Comment>(COMMENTS_ENDPOINT, 'POST', comment);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { FormEvent, useEffect, useState } from 'react';\nimport { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  handleOnAdd: (newComment: CommentData) => void;\n  isNewCommentLoading: boolean;\n  postSelected: Post | null;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleOnAdd,\n  isNewCommentLoading,\n  postSelected,\n}) => {\n  const [formData, setFormData] = useState<CommentData>({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [formErrors, setFormErrors] = useState<{\n    name: boolean;\n    email: boolean;\n    body: boolean;\n  }>({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  useEffect(() => {\n    setFormData({\n      name: '',\n      email: '',\n      body: '',\n    });\n    setFormErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  }, [postSelected]);\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    const isNameEmpty = formData.name.trim().length === 0;\n    const isEmailEmpty = formData.email.trim().length === 0;\n    const isBodyEmpty = formData.body.trim().length === 0;\n\n    setFormErrors({\n      name: isNameEmpty,\n      email: isEmailEmpty,\n      body: isBodyEmpty,\n    });\n\n    if (isNameEmpty || isEmailEmpty || isBodyEmpty) {\n      return;\n    }\n\n    handleOnAdd(formData);\n    setFormData({ ...formData, body: '' });\n  };\n\n  const handleFormReset = () => {\n    setFormData({ ...formData, body: '' });\n    setFormErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={`input ${formErrors.name ? 'is-danger' : ''}`}\n            value={formData.name}\n            onChange={({ target }) => setFormData((prev) => (\n              { ...prev, name: target.value.trimStart() }))}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={`input ${formErrors.email ? 'is-danger' : ''}`}\n            value={formData.email}\n            onChange={({ target }) => setFormData((prev) => (\n              { ...prev, email: target.value.trimStart() }))}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={`textarea ${formErrors.body ? 'is-danger' : ''}`}\n            value={formData.body}\n            onChange={({ target }) => setFormData((prev) => (\n              { ...prev, body: target.value.trimStart() }))}\n          />\n        </div>\n\n        {formErrors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={`button is-link ${\n              isNewCommentLoading ? 'is-loading' : ''\n            }`}\n            data-cy=\"AddCommentButton\"\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleFormReset}\n            data-cy=\"ClearButton\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { addComment, deleteComment, getComments } from '../utils/serverHelper';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post | null;\n  postSelected: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  postSelected,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isNewFormVisible, setIsNewFormVisible] = useState(false);\n  const [isWriteCommentVisible, setIsWriteCommentVisible] = useState(false);\n  const [isCommentErrorVisible, setIsCommentErrorVisible] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isNewCommentLoading, setIsNewCommentLoading] = useState(false);\n\n  const loadComments = async (selectedPost: Post) => {\n    setIsLoaderVisible(true);\n\n    try {\n      const commentsFromServer = await getComments(selectedPost.id);\n\n      setComments(commentsFromServer);\n      setIsCommentErrorVisible(false);\n      setIsWriteCommentVisible(true);\n    } catch {\n      setIsCommentErrorVisible(true);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    if (post !== null) {\n      loadComments(post);\n      setIsNewFormVisible(false);\n    }\n  }, [post]);\n\n  const handleOnDelete = (id: number) => {\n    if (post === null) {\n      return;\n    }\n\n    try {\n      deleteComment(id);\n      const preparedComments = comments.filter((comment) => comment.id !== id);\n\n      setComments(preparedComments);\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  const handleOnAdd = async (newComment: CommentData) => {\n    const preparedComment = { ...newComment, postId: post?.id };\n\n    setIsNewCommentLoading(true);\n\n    try {\n      const comment = await addComment(preparedComment);\n\n      setComments((prev) => [...prev, comment]);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsNewCommentLoading(false);\n    }\n  };\n\n  const handleShowNewForm = () => {\n    setIsNewFormVisible(true);\n  };\n\n  if (hasError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  const isCommentsVisible = comments.length > 0\n  && !isLoaderVisible && !isCommentErrorVisible;\n  const isNoComments = comments.length === 0\n  && !isLoaderVisible && !isCommentErrorVisible;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">{`#${post?.id}: ${post?.title}`}</h2>\n\n        <p data-cy=\"PostBody\">{post?.body}</p>\n      </div>\n\n      <div className=\"block\">\n        {isLoaderVisible && <Loader />}\n\n        {isCommentErrorVisible && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong!\n          </div>\n        )}\n\n        {isNoComments && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n\n        {isCommentsVisible && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n            {comments.map((comment) => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => {\n                      handleOnDelete(comment.id);\n                    }}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {isNewFormVisible && (\n          <NewCommentForm\n            handleOnAdd={handleOnAdd}\n            isNewCommentLoading={isNewCommentLoading}\n            postSelected={postSelected}\n          />\n        )}\n\n        {isWriteCommentVisible && !isNewFormVisible && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={handleShowNewForm}\n          >\n            Write a comment\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { getUsers } from '../utils/serverHelper';\n\ntype Props = {\n  handleSelectUser: (id: number) => void,\n  selectedUserId: number,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  handleSelectUser,\n  selectedUserId,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [showUsers, setShowUsers] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const loadUsers = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n      setIsError(false);\n    } catch {\n      setIsError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadUsers();\n  }, [loadUsers]);\n\n  const handleLoadUsers = () => {\n    setShowUsers(prevState => !prevState);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (wrapperRef.current\n        && !wrapperRef.current.contains(event.target as Node)) {\n        setShowUsers(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [wrapperRef]);\n\n  const handleChangeUser = (newUserId: number) => {\n    setShowUsers(false);\n    handleSelectUser(newUserId);\n  };\n\n  const selectedUserName = users.find(user => user.id === selectedUserId)?.name;\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={wrapperRef}\n      className={classNames('dropdown', {\n        'is-active': showUsers,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleLoadUsers}\n        >\n          <span>\n            {selectedUserId ? selectedUserName : 'Choose a user'}\n          </span>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {isError && (\n            <div className=\"notification is-danger\">\n              Something went wrong!\n            </div>\n          )}\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': selectedUserId === user.id,\n              })}\n              key={user.id}\n              onClick={() => {\n                handleChangeUser(user.id);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { getPosts } from './utils/serverHelper';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [postSelected, setPostSelected] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isPostDetailsVisible, setIsPostDetailsVisible] = useState(false);\n  const [isSideBarVisible, setIsSideBarVisible] = useState(false);\n  const [isPostErrorVisible, setIsPostErrorVisible] = useState(false);\n  const [isEmptyPostMessageVisible,\n    setIsEmptyPostMessageVisible] = useState(false);\n\n  const loadPosts = async () => {\n    setIsLoaderVisible(true);\n    setIsEmptyPostMessageVisible(false);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      setPosts(postsFromServer);\n      setIsPostErrorVisible(false);\n      if (postsFromServer.length === 0) {\n        setIsEmptyPostMessageVisible(true);\n      }\n    } catch {\n      setIsPostErrorVisible(true);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  const handleSelectPost = (post: Post) => {\n    if (postSelected?.id === post.id) {\n      setIsSideBarVisible(false);\n      setIsPostDetailsVisible(false);\n      setPostSelected(null);\n    } else {\n      setPostSelected(post);\n      setIsSideBarVisible(true);\n      setIsPostDetailsVisible(true);\n    }\n  };\n\n  const handleSelectUser = (newUserId: number) => {\n    setSelectedUserId(newUserId);\n    setPostSelected(null);\n    setIsPostDetailsVisible(false);\n    setIsSideBarVisible(false);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  handleSelectUser={handleSelectUser}\n                  selectedUserId={selectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {isPostErrorVisible && posts.length === 0 && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isLoaderVisible && <Loader />}\n\n                {posts.length > 0 && !isLoaderVisible && (\n                  <PostsList\n                    posts={posts}\n                    postSelected={postSelected}\n                    handleSelectPost={handleSelectPost}\n                  />\n                )}\n\n                {isEmptyPostMessageVisible && !isLoaderVisible && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSideBarVisible },\n            )}\n          >\n            {isPostDetailsVisible && (\n              <div className=\"tile is-child box is-success\">\n                <PostDetails post={postSelected} postSelected={postSelected} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}